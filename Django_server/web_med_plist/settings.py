"""
Django settings for web_med_plist project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import datetime
from django.core.management.utils import get_random_secret_key
import environ
env = environ.Env()
environ.Env.read_env()
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY_DJ', default=get_random_secret_key())
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG") if os.environ.get("DEBUG") else "0"))

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(' ')

AUTH_USER_MODEL = 'users.User'

# Application definition

INSTALLED_APPS = [
    'api',
    'chat',
    'main_app',
    'sendemail',
    'users',
    'src.videoch_chat',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'sorl.thumbnail',
    'debug_toolbar',
    'django.contrib.postgres',
    # 'django_filters',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',

]

MIDDLEWARE = MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'web_med_plist.urls'

TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries':{
                # 'tags_filter_payment': 'main_1e9usd.templatetags.tags_filter_payment', # noqa
                'addclass_html_filter': 'users.templatetags.addclass_html_filter', # noqa
            },
        },
    },
]

WSGI_APPLICATION = 'web_med_plist.wsgi.application'
ASGI_APPLICATION = "web_med_plist.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': env.db()}
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_DB_SX038'),
            'USER': os.environ.get('POSTGRES_USER_SX038'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD_SX038'),
            'HOST': os.environ.get('DB_HOST_SX038'),
            'PORT': os.environ.get('DB_PORT_SX038')}}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru'

gettext = lambda s: s

LANGUAGES = (
    ('ru', gettext('Russian')),
    ('en', gettext('English')),
    ('es', gettext('Spain')),
)

LOCALE_PATHS = (
    # 'locale',
    os.path.join(BASE_DIR, 'locale/'),
)
# print(LOCALE_PATHS)

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
LOGIN_URL = '/auth/login/'
LOGIN_REDIRECT_URL = 'index'
CORS_ORIGIN_ALLOW_ALL = True
CORS_URLS_REGEX = r'^/api/.*$'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'sent_emails')
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    ACCOUNT_ACTIVATION_DAYS = 7
    EMAIL_HOST = os.environ.get('EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT'))
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = True
    SERVER_EMAIL = EMAIL_HOST_USER
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
    ADMINS = (
        (EMAIL_HOST_USER, SERVER_EMAIL),)
    MANAGERS = ADMINS

SITE_ID = 1

INTERNAL_IPS = [
    "127.0.0.1",
]

APPEND_SLASH = False

IS_CONNECT = os.environ.get('IS_CONNECT')

IS_CILIA_ASSISTANT_INDEX = os.environ.get('IS_CILIA_ASSISTANT_INDEX')
IS_CILIA_ASSISTANT_HOME = os.environ.get('IS_CILIA_ASSISTANT_HOME')
IS_CILIA_ASSISTANT_PYAMENT = os.environ.get('IS_CILIA_ASSISTANT_PYAMENT')

PHONE_TELEGRAM = os.environ.get('PHONE_TELEGRAM_JS_CILIA')
TOKEN_TELEGRAM = os.environ.get('TOKEN_TELEGRAM_JS_CILIA')

# APP TELEGRAM

APP_API_AD_TELEGRAM = os.environ.get('APP_API_AD_TELEGRAM_JS_CILIA')
APP_API_HASH_TELEGRAM = os.environ.get('APP_API_HASH_TELEGRAM_JS_CILIA')
LOGIN_BOT_SENDER_TELEGRAM = os.environ.get(
    'LOGIN_BOT_SENDER_TELEGRAM_JS_CILIA')
NAME_USER_SENDER_TELEGRAM = os.environ.get(
    'NAME_USER_SENDER_TELEGRAM_79041164527')


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': [
            os.environ.get('CACHE_LOCAL'),
            os.environ.get('CACHE_HOST')
        ]
    }
}


JWT_AUTH = {
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3000),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}


REDIS_HOST = os.environ.get('REDIS_HOST', 'webrtc-redis-server')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
IS_REDIS = os.environ.get('IS_REDIS')


if DEBUG:
    HOST_NAME = 'localhost'
    HOST_PORT = 6379
else:
    HOST_NAME = REDIS_HOST
    HOST_PORT = REDIS_PORT

if IS_REDIS:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [(HOST_NAME, HOST_PORT)],
            },
        },
    }
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:8004",
    "http://127.0.0.1:8004"
]
